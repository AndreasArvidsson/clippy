import clipboardEvent from "clipboard-event";
import * as electron from "electron";
import { storage } from "./storage";
import type { ClipItem, ClipItemImage, ClipItemType } from "./types/types";
import { getNextClipItemId } from "./util/clipItemId";
import { createHash } from "./util/createHash";
import { toMarkdownImageLink } from "./util/transformations";

// Clipboards containing any of these formats should not be saved
const ignoreFormats = [
    "org.nspasteboard.TransientType",
    "org.nspasteboard.ConcealedType",
    "org.nspasteboard.AutoGeneratedType",
    "org.nspasteboard.source",
    "ExcludeClipboardContentFromMonitorProcessing",
];

function hasIgnoreFormat(): boolean {
    return ignoreFormats.some((f) => electron.clipboard.has(f));
}

function read(): ClipItem | null {
    const formats = electron.clipboard.availableFormats();

    if (formats.length === 0 || hasIgnoreFormat()) {
        return null;
    }

    const created = Date.now();
    const id = getNextClipItemId(created);
    const text = electron.clipboard.readText() || undefined;
    const rtf = electron.clipboard.readRTF() || undefined;
    const html = electron.clipboard.readHTML() || undefined;
    const image = readImage(html);
    const bookmark = readBookmark();
    const type: ClipItemType = image != null ? "image" : "text";
    const hash = createHash(image?.data ?? text ?? rtf ?? html ?? "");

    return {
        id,
        created,
        hash,
        type,
        name: undefined,
        list: undefined,
        text,
        rtf,
        html,
        bookmark,
        image,
    };
}

function readImage(html: string | undefined): ClipItemImage | undefined {
    const nativeImage = electron.clipboard.readImage();
    if (nativeImage.isEmpty()) {
        return undefined;
    }
    return {
        src:
            html != null
                ? /<img.*?src=(?:"(.+?)"|'(.+?)').*?>/g.exec(html)?.[1]
                : undefined,
        alt:
            html != null
                ? /<img.*?alt=(?:"(.+?)"|'(.+?)').*?>/g.exec(html)?.[1]
                : undefined,
        data: nativeImage.toDataURL(),
    };
}

function readBookmark(): electron.ReadBookmark | undefined {
    const bookmark = electron.clipboard.readBookmark();
    return bookmark.title || bookmark.url ? bookmark : undefined;
}

function write(items: ClipItem[]) {
    if (items.length === 1) {
        writeItem(items[0]);
    } else {
        writeItems(items);
    }
}

function writeItems(items: ClipItem[]) {
    const texts: string[] = [];
    for (const item of items) {
        switch (item.type) {
            case "text":
                texts.push(item.text ?? item.rtf ?? item.html ?? "");
                break;
            case "image": {
                const name = item.name ?? item.image?.alt ?? "IMAGE";
                if (item.image?.src) {
                    texts.push(toMarkdownImageLink(name, item.image.src));
                } else {
                    texts.push(name);
                }
                break;
            }
        }
    }
    electron.clipboard.writeText(texts.join("\n"));
}

function writeItem(item: ClipItem) {
    const { text, rtf, html, image, bookmark } = item;
    electron.clipboard.write({
        text,
        rtf,
        html,
        bookmark: bookmark?.title,
        image:
            image != null
                ? electron.nativeImage.createFromDataURL(image.data)
                : undefined,
    });
}

function onChange(listener: (item: ClipItem) => void) {
    clipboardEvent.startListening();

    clipboardEvent.on("change", () => {
        if (storage.getConfig().paused) {
            return;
        }

        const item = read();

        if (item != null) {
            listener(item);
        }
    });
}

export const clipboard = {
    write,
    onChange,
};
