name: Create Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Read version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # - name: Create Git tag
      #   run: |
      #     git tag v${{ env.version }}
      #     git push origin v${{ env.version }}

      - name: Create GitHub release
        id: create-release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.version }}"
          release_name: "${{ env.version }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    name: Build on ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Install dependencies
        run: npm install

      - name: Package artifact
        run: npm run package

      - name: Compress artifact
        run: powershell.exe Compress-Archive -Path 'dist/*' -DestinationPath 'artifact.zip'
        if: runner.os == 'Windows'

      - name: Compress artifact
        run: zip -r artifact.zip dist/*
        if: runner.os != 'Windows'

      - name: Trim `-latest` from the matrix OS name
        run: |
          OS_NAME="${{ matrix.os }}"
          OS_NAME=${OS_NAME%-latest}
          echo "os-name=$OS_NAME" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./artifact.zip
          asset_name: clippy-${${ env.os-name }}-${{ needs.create-release.outputs.version }}.zip
          asset_content_type: application/zip
